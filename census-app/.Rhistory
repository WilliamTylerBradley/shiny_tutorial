geom_density()
ggplot(dataset, aes(x=obs, fill=factor(trt))) +
geom_density()
ggplot(dataset, aes(x=obs, fill=factor(trt))) +
geom_density(alpha=.5)
trt1<-rnorm(n)
trt1<-(trt1-mean(trt1))/sd(trt1)*sd+mean1
trt2<-rnorm(n)
trt2<-(trt2-mean(trt2))/sd(trt2)*sd+diff1_2
trt3<-rnorm(n)
trt3<-(trt3-mean(trt3))/sd(trt3)*sd+diff1_3
dataset<-data.frame(trt=c(rep(1,n),rep(2,n),rep(3,n)),
obs=c(trt1,trt2,trt3))
boxplot(dataset$obs~dataset$trt)
ggplot(dataset, aes(x=obs, fill=factor(trt))) +
geom_density(alpha=.5)
ggplot(dataset, aes(x=obs, fill=factor(trt))) +
geom_density(alpha=.5) +
geom_vline(aes(xintercept=obs.mean,color=trt)
boxplot(dataset$obs~dataset$trt)
ggplot(dataset, aes(x=obs, fill=factor(trt))) +
geom_density(alpha=.5) +
geom_vline(aes(xintercept=obs.mean,color=trt))
library(plyr)
meansset<-ddply(dataset, "trt", summarize, trt.mean=mean(obs))
meansset
boxplot(dataset$obs~dataset$trt)
ggplot(dataset, aes(x=obs, fill=factor(trt))) +
geom_density(alpha=.5) +
geom_vline(meansset, aes(xintercept=trt.mean,color=trt))
ggplot(dataset, aes(x=obs, fill=factor(trt))) +
geom_density(alpha=.5)
meansset
boxplot(dataset$obs~dataset$trt)
ggplot(dataset, aes(x=obs, fill=factor(trt))) +
geom_density(alpha=.5) +
geom_vline(meansset, aes(xintercept=trt.mean,color=trt))
ggplot(dataset, aes(x=obs, fill=factor(trt))) +
geom_density(alpha=.5) +
geom_vline(data=meansset, aes(xintercept=trt.mean,color=trt))
ggplot(dataset, aes(x=obs, fill=factor(trt))) +
geom_density(alpha=.5) +
geom_vline(data=meansset, aes(xintercept=trt.mean,color=factor(trt)))
ggplot(dataset, aes(x=obs, fill=factor(trt))) +
geom_histogram(alpha=.5, position="identity") +
geom_vline(data=meansset, aes(xintercept=trt.mean,color=factor(trt)))
ggplot(dataset, aes(x=obs, binwidth=.25, fill=factor(trt))) +
geom_histogram(alpha=.5, position="identity") +
geom_vline(data=meansset, aes(xintercept=trt.mean,color=factor(trt)))
ggplot(dataset, aes(x=obs, fill=factor(trt))) +
geom_histogram(alpha=.5, binwidth=.5, position="identity") +
geom_vline(data=meansset, aes(xintercept=trt.mean,color=factor(trt)))
ggplot(dataset, aes(x = obs)) +
stat_density(aes(ymax = ..density..,  ymin = -..density..,
fill = trt, color = trt),
geom = "ribbon", position = "identity") +
facet_grid(. ~ trt) +
coord_flip() +
theme(legend.position = "none")
boxplot(dataset$obs~dataset$trt)
ggplot(dataset, aes(x=obs, fill=factor(trt))) +
geom_histogram(alpha=.5, binwidth=.5, position="identity") +
geom_vline(data=meansset, aes(xintercept=trt.mean,color=factor(trt)))
ggplot(dataset, aes(x=obs, fill=factor(trt))) +
geom_density(alpha=.5) +
geom_vline(data=meansset, aes(xintercept=trt.mean,color=factor(trt)))
ggplot(xy, aes(zvar, xvar)) +
geom_boxplot(aes(fill = zvar)) +
theme(legend.position = "none")
ggplot(dataset, aes(x=obs)) +
geom_boxplot(aes(fill = trt)) +
theme(legend.position = "none")
ggplot(dataset, aes(x=obs, y=trt)) +
geom_boxplot(aes(fill = trt)) +
theme(legend.position = "none")
ggplot(dataset, aes(x=trt, y=obs)) +
geom_boxplot(aes(fill = trt)) +
theme(legend.position = "none")
ggplot(dataset, aes(x=obs, y=obs)) +
geom_boxplot(aes(fill = trt)) +
theme(legend.position = "none")
ggplot(dataset, aes(trt, obs)) +
geom_boxplot(aes(fill = trt)) +
theme(legend.position = "none")
ggplot(dataset, aes(trt, obs)) +
geom_boxplot(aes(fill = trt))
ggplot(dataset, aes(trt, obs)) +
geom_boxplot(aes(fill = factor(trt)))
b2<-ggplot(dataset, aes(trt, obs)) +
geom_jitter(alpha=I(1/4), aes(color=facotr(trt)))
geom_jitter(alpha=I(1/4), aes(color=facotr(trt)))
b2<-ggplot(dataset, aes(trt, obs)) +
geom_jitter(alpha=I(1/4), aes(color=facotr(trt)))
b2<-ggplot(dataset, aes(trt, obs)) +
geom_jitter(alpha=I(1/4), aes(color=factor(trt)))
b2<-ggplot(dataset, aes(trt, obs)) +
geom_jitter(alpha=I(1/4), aes(fill=factor(trt)))
ggplot(dataset, aes(x=obs, fill=factor(trt))) +
geom_density(alpha=.5) +
geom_vline(data=meansset, aes(xintercept=trt.mean,color=factor(trt)))
ggplot(dataset, aes(trt, obs)) +
geom_jitter(alpha=I(1/4), aes(fill=factor(trt)))
ggplot(dataset, aes(trt, obs)) +
geom_jitter(alpha=I(1/4), aes(color=factor(trt)))
ggplot(dataset, aes(trt, obs)) +
geom_jitter(aes(color=factor(trt)))
qplot(trt, obs, data = dataset, geom="boxplot")+
geom_point() +
xlab("") +
facet_grid(.~ses, scales="free",space="free") +
theme_bw() +
opts(strip.text.y = theme_text())
qplot(trt, obs, data = dataset, geom="boxplot")+
geom_point() +
xlab("") +
facet_grid(.~ses, scales="free",space="free") +
theme_bw()
ggplot(dataset, aes(trt, obs)) +
geom_boxplot(aes(fill = factor(trt)))
ggplot(dataset, aes(trt, obs)) +
geom_boxplot(aes(fill = factor(trt))) +
geom_point()
ggplot(dataset, aes(trt, obs)) +
geom_boxplot(aes(fill = factor(trt))) +
geom_jitter()
?geom_jitter
ggplot(dataset, aes(trt, obs)) +
geom_boxplot(aes(fill = factor(trt))) +
geom_jitter(width=.5)
ggplot(dataset, aes(trt, obs)) +
geom_boxplot(aes(fill = factor(trt))) +
geom_jitter(width=.05)
?geom_jitter
ggplot(dataset, aes(trt, obs)) +
geom_boxplot(aes(fill = factor(trt))) +
geom_jitter(height=.05)
ggplot(dataset, aes(trt, obs)) +
geom_boxplot(aes(fill = factor(trt))) +
geom_jitter(height=.05, width=.05)
ggplot(dataset, aes(trt, obs)) +
geom_boxplot(aes(fill = factor(trt))) +
geom_jitter(position=position_jitter(height=.05, width=.05))
ggplot(dataset, aes(trt, obs)) +
geom_boxplot(aes(fill = factor(trt))) +
geom_jitter(position=position_jitter(width=.05))
ggplot(dataset, aes(trt, obs)) +
geom_boxplot(aes(fill = factor(trt))) +
geom_jitter(position=position_jitter(width=.25))
ggplot(dataset, aes(trt, obs)) +
geom_boxplot(aes(fill = factor(trt))) +
geom_jitter(position=position_jitter(width=.1))
ggplot(dataset, aes(trt, obs)) +
geom_boxplot(aes(fill = factor(trt))) +
geom_jitter(position=position_jitter(width=.1),color=factor(trt))
ggplot(dataset, aes(trt, obs)) +
geom_boxplot(aes(fill = factor(trt))) +
geom_jitter(position=position_jitter(width=.1))
ggplot(dataset, aes(trt, obs)) +
geom_boxplot(aes(fill = factor(trt))) +
geom_jitter(position=position_jitter(width=.05))
ggplot(dataset, aes(x=obs, color=trt)) +
geom_histogram(aes(y=..density.., fill=factor(trt)), alpha=.3) +
geom_density() +
facet_grid(trt ~ .)
ggplot(dataset, aes(x=obs, color=trt)) +
geom_histogram(aes(y=..density.., fill=factor(trt)), alpha=.3) +
geom_density() +
facet_grid(factor(trt) ~ .)
ggplot(dataset, aes(x=obs, color=trt)) +
geom_histogram(aes(y=..density.., fill=factor(trt)), alpha=.3) +
geom_density() +
facet_grid(trt ~ .)
ggplot(dataset, aes(x=obs, color=factor(trt))) +
geom_histogram(aes(y=..density.., fill=factor(trt)), alpha=.3) +
geom_density() +
facet_grid(trt ~ .)
ggplot(dataset, aes(x=obs, color=factor(trt))) +
geom_histogram(aes(y=..density.., fill=factor(trt)), binwidth=.25, alpha=.3) +
geom_density() +
facet_grid(trt ~ .)
ggplot(dataset, aes(trt, obs)) +
geom_violin(aes(fill = factor(trt))) +
geom_jitter(position=position_jitter(width=.05))
?geom_violin
ggplot(dataset, aes(trt, obs)) +
geom_violin(aes(fill = factor(trt)), trim=FALSE) +
geom_jitter(position=position_jitter(width=.05))
ggplot(dataset, aes(trt, obs)) +
geom_violin(aes(fill = factor(trt)), trim=FALSE) +
geom_jitter(position=position_jitter(width=.05)) +
geom_hline(data=meansset, aes(yintercept=trt.mean,color=factor(trt)))
ggplot(dataset, aes(x=obs, fill=factor(trt))) +
geom_density(alpha=.5) +
geom_vline(data=meansset, aes(xintercept=trt.mean,color=factor(trt)))
ggplot(dataset, aes(x=obs, color=factor(trt))) +
geom_histogram(aes(y=..density.., fill=factor(trt)), binwidth=.25, alpha=.3) +
geom_density() +
facet_grid(trt ~ .)
ggplot(dataset, aes(x=obs, color=factor(trt))) +
geom_histogram(aes(y=..density.., fill=factor(trt)), binwidth=.5, alpha=.3) +
geom_density() +
facet_grid(trt ~ .)
ggplot(dataset, aes(trt, obs)) +
geom_boxplot(aes(fill = factor(trt)), trim=FALSE) +
geom_jitter(position=position_jitter(width=.05))
ggplot(dataset, aes(trt, obs)) +
geom_boxplot(aes(fill = factor(trt)), trim=FALSE) +
geom_jitter(alpha=.5, position=position_jitter(width=.05))
library(MASS)
?mvrt
library(mtvnorm)
library(mvtnorm)
?mvt
?rmvt
ones <- rmvt(n=100, sigma=matrix(c(.5,0,0,2.5),nrow=2), df=1)
plot(ones, asp=1)
ones <- rmvt(n=100, sigma=matrix(c(.5,0,0,1.5),nrow=2), df=1)
plot(ones, asp=1)
ones <- rmvt(n=50, sigma=matrix(c(.5,0,0,1.5),nrow=2), df=1)
plot(ones, asp=1)
ones <- rmvt(n=50, sigma=matrix(c(.5,0,0,1.5),nrow=2), df=5)
plot(ones, asp=1)
ones <- rmvt(n=50, sigma=matrix(c(.5,0,0,1.5),nrow=2), df=2)
plot(ones, asp=1)
set.seed(2015)
ones <- rmvt(n=50, sigma=matrix(c(.5,0,0,1.5),nrow=2), df=2)
plot(ones, asp=1)
zeros <- rmvt(n=50, sigma=matrix(c(1.5,0,0,.5),nrow=2), df=2)
plot(zeros, asp=1)
ones <- rmvt(n=50, sigma=matrix(c(.5,0,0,1.5),nrow=2), df=2)
plot(ones, asp=1)
set.seed(2015)
?rmvt
ones <- rmvt(n=50, sigma=matrix(c(.5,0,0,1.5),nrow=2), df=2)
plot(ones, asp=1)
pointset<-data.frame(rbind(ones,zeros),c(rep('1',n),rep('0',n)))
names(pointset)<-c('X','Y','Value')
plot(pointset$X,pointset$Y,col=c('blue','red')[pointset$Value])
set.seed(2015)
?rmvt
n<-50
ones <- rmvt(n=n, sigma=matrix(c(.5,0,0,1.5),nrow=2), df=2)
plot(ones, asp=1)
zeros <- rmvt(n=n, sigma=matrix(c(1.5,0,0,.5),nrow=2), df=2)
plot(zeros, asp=1)
pointset<-data.frame(rbind(ones,zeros),c(rep('1',n),rep('0',n)))
names(pointset)<-c('X','Y','Value')
plot(pointset$X,pointset$Y,col=c('blue','red')[pointset$Value])
zeros
matrix(c(rep(1,n),rep(1,n)),nrow=n)
zeros <- rmvt(n=n, sigma=matrix(c(1.5,0,0,.5),nrow=2), df=2)-matrix(c(rep(1,n),rep(1,n)),nrow=n)
plot(zeros, asp=1)
set.seed(2015)
n<-50
ones <- rmvt(n=n, sigma=matrix(c(.5,0,0,1.5),nrow=2), df=2)
ones <- ones + matrix(c(rep(1,n),rep(1,n)),nrow=n)
plot(ones, asp=1)
zeros <- rmvt(n=n, sigma=matrix(c(1.5,0,0,.5),nrow=2), df=2)
zeros <- zeros - matrix(c(rep(1,n),rep(1,n)),nrow=n)
plot(zeros, asp=1)
pointset<-data.frame(rbind(ones,zeros),c(rep('1',n),rep('0',n)))
names(pointset)<-c('X','Y','Value')
plot(pointset$X,pointset$Y,col=c('blue','red')[pointset$Value])
# Base surface
spacing<-seq(1,10,.05)
surface<-expand.grid(spacing,spacing)
names(surface)<-c('X','Y')
surface3<-surface
model3<-kknn(Value ~ X + Y, pointset, surface3, k=7, kernel = "rectangular") #rectangular is unweighted
surface3$Value<-model3$prob[,2]
# Get library for weighted knn
library(kknn)
model3<-kknn(Value ~ X + Y, pointset, surface3, k=7, kernel = "rectangular") #rectangular is unweighted
surface3$Value<-model3$prob[,2]
surface3w<-surface
model3w<-kknn(Value ~ X + Y, pointset, surface3w, k=7, kernel = "rank")
surface3w$Value<-model3w$prob[,2]
folder<-"C:/Users/Tyler/WKNN/"
png(paste0(folder,"unweighted_3.png"),width = 600, height = 480,)
par(mar=c(1, 3.1, 1, .5))
filled.contour(x=spacing, y=spacing, matrix(surface3$Value,nrow=length(spacing)), asp=1,
col=colorRampPalette(c("cornflowerblue","white","indianred1"),space = "Lab")(20),
plot.axes={points(pointset$X,pointset$Y,col=c('blue','red')[pointset$Value], pch=20)})
dev.off()
spacing<-seq(-15,10,.05)
surface<-expand.grid(spacing,spacing)
names(surface)<-c('X','Y')
surface3<-surface
model3<-kknn(Value ~ X + Y, pointset, surface3, k=7, kernel = "rectangular") #rectangular is unweighted
surface3$Value<-model3$prob[,2]
spacing<-seq(-15,10,.075)
surface<-expand.grid(spacing,spacing)
names(surface)<-c('X','Y')
surface3<-surface
model3<-kknn(Value ~ X + Y, pointset, surface3, k=7, kernel = "rectangular") #rectangular is unweighted
surface3$Value<-model3$prob[,2]
surface3w<-surface
model3w<-kknn(Value ~ X + Y, pointset, surface3w, k=7, kernel = "rank")
surface3w$Value<-model3w$prob[,2]
#surface
# http://stackoverflow.com/questions/28469829/how-to-fill-in-the-contour-fully-using-stat-contour
# couldn't get this work, so use base graphics instead
#http://stackoverflow.com/questions/19429350/adding-points-to-filled-contour-in-r-at-the-right-place
folder<-"C:/Users/Tyler/WKNN/"
png(paste0(folder,"unweighted_3.png"),width = 600, height = 480,)
par(mar=c(1, 3.1, 1, .5))
filled.contour(x=spacing, y=spacing, matrix(surface3$Value,nrow=length(spacing)), asp=1,
col=colorRampPalette(c("cornflowerblue","white","indianred1"),space = "Lab")(20),
plot.axes={points(pointset$X,pointset$Y,col=c('blue','red')[pointset$Value], pch=20)})
dev.off()
?kknn
png(paste0(folder,"weighted_3.png"),width = 600, height = 480,)
par(mar=c(1, 3.1, 1, .5))
filled.contour(x=spacing, y=spacing, matrix(surface3w$Value,nrow=length(spacing)), asp=1,
col=colorRampPalette(c("cornflowerblue","white","indianred1"),space = "Lab")(20),
plot.axes={points(pointset$X,pointset$Y,col=c('blue','red')[pointset$Value], pch=20)})
dev.off()
spacing<-seq(-15,10,.05)
surface<-expand.grid(spacing,spacing)
names(surface)<-c('X','Y')
surface3<-surface
model3<-kknn(Value ~ X + Y, pointset, surface3, k=7, kernel = "rectangular") #rectangular is unweighted
surface3$Value<-model3$prob[,2]
surface3w<-surface
model3w<-kknn(Value ~ X + Y, pointset, surface3w, k=7, kernel = "rank")
surface3w$Value<-model3w$prob[,2]
#surface
# http://stackoverflow.com/questions/28469829/how-to-fill-in-the-contour-fully-using-stat-contour
# couldn't get this work, so use base graphics instead
#http://stackoverflow.com/questions/19429350/adding-points-to-filled-contour-in-r-at-the-right-place
folder<-"C:/Users/Tyler/WKNN/"
png(paste0(folder,"unweighted_3.png"),width = 600, height = 480,)
par(mar=c(1, 3.1, 1, .5))
filled.contour(x=spacing, y=spacing, matrix(surface3$Value,nrow=length(spacing)), asp=1,
col=colorRampPalette(c("cornflowerblue","white","indianred1"),space = "Lab")(20),
plot.axes={points(pointset$X,pointset$Y,col=c('blue','red')[pointset$Value], pch=20)})
dev.off()
png(paste0(folder,"weighted_3.png"),width = 600, height = 480,)
par(mar=c(1, 3.1, 1, .5))
filled.contour(x=spacing, y=spacing, matrix(surface3w$Value,nrow=length(spacing)), asp=1,
col=colorRampPalette(c("cornflowerblue","white","indianred1"),space = "Lab")(20),
plot.axes={points(pointset$X,pointset$Y,col=c('blue','red')[pointset$Value], pch=20)})
dev.off()
knn
wknn
kknn
str(kknn)
str(kknn[2])
kernel_opts<-("rectangular", "triangular",
"epanechnikov", "biweight", "triweight", "cos", "inv",
"gaussian", "rank", "optimal")
kernel_opts<-c("rectangular", "triangular",
"epanechnikov", "biweight", "triweight", "cos", "inv",
"gaussian", "rank", "optimal")
kernel_opts
for( kernel in kernel_opts) {
print(kernel)
}
for( kernel in kernel_opts ) {
print("Making graph for "+kernel)
}
for( kernel in kernel_opts ) {
print(paste("Making graph for",kernel))
}
kernel_opts[1]
for( kernel in kernel_opts[1] ) {
print(paste("Making graph for",kernel))
model<-kknn(Value ~ X + Y, pointset, surface, k=7, kernel = "rank")
surface_model$Value<-model3w$prob[,2]
png(paste0(folder,paste0(kernel".png"),width = 600, height = 480,)
par(mar=c(1, 3.1, 1, .5))
filled.contour(x=spacing, y=spacing, matrix(surface_model$Value,nrow=length(spacing)), asp=1,
col=colorRampPalette(c("cornflowerblue","white","indianred1"),space = "Lab")(20),
plot.axes={points(pointset$X,pointset$Y,col=c('blue','red')[pointset$Value], pch=20)})
dev.off()
}
paste0(kernel,".png")
paste0(folder,kernel,".png")
kernel_opts[1]
for( kernel in kernel_opts[1] ) {
print(paste("Making graph for",kernel))
model<-kknn(Value ~ X + Y, pointset, surface, k=7, kernel = "rank")
surface_model$Value<-model3w$prob[,2]
png(paste0(folder,kernel,".png"),width = 600, height = 480,)
par(mar=c(1, 3.1, 1, .5))
filled.contour(x=spacing, y=spacing, matrix(surface_model$Value,nrow=length(spacing)), asp=1,
col=colorRampPalette(c("cornflowerblue","white","indianred1"),space = "Lab")(20),
plot.axes={points(pointset$X,pointset$Y,col=c('blue','red')[pointset$Value], pch=20)})
dev.off()
}
for( kernel in kernel_opts[1] ) {
print(paste("Making graph for",kernel))
surface_model<-surface
model<-kknn(Value ~ X + Y, pointset, surface, k=7, kernel = "rank")
surface_model$Value<-model3w$prob[,2]
png(paste0(folder,kernel,".png"),width = 600, height = 480,)
par(mar=c(1, 3.1, 1, .5))
filled.contour(x=spacing, y=spacing, matrix(surface_model$Value,nrow=length(spacing)), asp=1,
col=colorRampPalette(c("cornflowerblue","white","indianred1"),space = "Lab")(20),
plot.axes={points(pointset$X,pointset$Y,col=c('blue','red')[pointset$Value], pch=20)})
dev.off()
}
surface3w$Value
?round
surface3w$Value<-round(model3w$prob[,2])
filled.contour(x=spacing, y=spacing, matrix(surface3w$Value,nrow=length(spacing)), asp=1,
col=colorRampPalette(c("cornflowerblue","white","indianred1"),space = "Lab")(20),
plot.axes={points(pointset$X,pointset$Y,col=c('blue','red')[pointset$Value], pch=20)})
plot(pointset$X,pointset$Y,col=c('blue','red')[pointset$Value])
min(pointset)
min(pointset[,1])
min(pointset[,2])
max(pointset[,1])
max(pointset[,2])
filled.contour(x=spacing, y=spacing, matrix(surface3w$Value,nrow=length(spacing)), asp=1,
col=colorRampPalette(c("cornflowerblue","white","indianred1"),space = "Lab")(20),
plot.axes={points(pointset$X,pointset$Y,col=c('blue','red')[pointset$Value], pch=20)})
for( kernel in kernel_opts ) {
print(paste("Making graph for",kernel))
surface_model<-surface
model<-kknn(Value ~ X + Y, pointset, surface, k=7, kernel = "rank")
surface_model$Value<-model3w$prob[,2]
png(paste0(folder,kernel,".png"),width = 600, height = 480,)
par(mar=c(1, 3.1, 1, .5))
filled.contour(x=spacing, y=spacing, matrix(surface_model$Value,nrow=length(spacing)), asp=1,
col=colorRampPalette(c("cornflowerblue","white","indianred1"),space = "Lab")(20),
plot.axes={points(pointset$X,pointset$Y,col=c('blue','red')[pointset$Value], pch=20)})
dev.off()
}
for( kernel in kernel_opts ) {
print(paste("Making graph for",kernel))
surface_model<-surface
model<-kknn(Value ~ X + Y, pointset, surface, k=7, kernel = kernel)
surface_model$Value<-model3w$prob[,2]
png(paste0(folder,kernel,".png"),width = 600, height = 480,)
par(mar=c(1, 3.1, 1, .5))
filled.contour(x=spacing, y=spacing, matrix(surface_model$Value,nrow=length(spacing)), asp=1,
col=colorRampPalette(c("cornflowerblue","white","indianred1"),space = "Lab")(20),
plot.axes={points(pointset$X,pointset$Y,col=c('blue','red')[pointset$Value], pch=20)})
dev.off()
}
kernel_opts[9]
for( kernel in kernel_opts[1] ) {
}
print(paste("Making graph for",kernel))
surface_model<-surface
model<-kknn(Value ~ X + Y, pointset, surface, k=7, kernel = kernel)
surface_model$Value<-model3w$prob[,2]
surface_model$Value<-model$prob[,2]
png(paste0(folder,kernel,".png"),width = 600, height = 480,)
par(mar=c(1, 3.1, 1, .5))
filled.contour(x=spacing, y=spacing, matrix(surface_model$Value,nrow=length(spacing)), asp=1,
col=colorRampPalette(c("cornflowerblue","white","indianred1"),space = "Lab")(20),
plot.axes={points(pointset$X,pointset$Y,col=c('blue','red')[pointset$Value], pch=20)})
dev.off()
for( kernel in kernel_opts ) {
print(paste("Making graph for",kernel))
surface_model<-surface
model<-kknn(Value ~ X + Y, pointset, surface, k=7, kernel = kernel)
surface_model$Value<-model$prob[,2]
png(paste0(folder,kernel,".png"),width = 600, height = 480,)
par(mar=c(1, 3.1, 1, .5))
filled.contour(x=spacing, y=spacing, matrix(surface_model$Value,nrow=length(spacing)), asp=1,
col=colorRampPalette(c("cornflowerblue","white","indianred1"),space = "Lab")(20),
plot.axes={points(pointset$X,pointset$Y,col=c('blue','red')[pointset$Value], pch=20)})
dev.off()
}
library(shiny)
library(shiny)
runApp("C:/Users/Tyler/Shiny/shiny_tutorial/Hello Shiny")
runApp("C:/Users/Tyler/Shiny/shiny_tutorial/Hello Shiny")
runApp("C:/Users/Tyler/Shiny/shiny_tutorial/Hello Shiny")
runApp("C:/Users/Tyler/Shiny/shiny_tutorial/Hello Shiny")
runApp("C:/Users/Tyler/Shiny/shiny_tutorial/Hello Shiny")
h1("My title")
runApp("C:/Users/Tyler/Shiny/shiny_tutorial/Hello Shiny")
runApp("C:/Users/Tyler/Shiny/shiny_tutorial/Hello Shiny")
runApp("C:/Users/Tyler/Shiny/shiny_tutorial/Hello Shiny")
runApp("C:/Users/Tyler/Shiny/shiny_tutorial/Hello Shiny")
runApp("C:/Users/Tyler/Shiny/shiny_tutorial/Hello Shiny")
runApp("C:/Users/Tyler/Shiny/shiny_tutorial/Hello Shiny")
runApp("C:/Users/Tyler/Shiny/shiny_tutorial/Hello Shiny")
runApp("C:/Users/Tyler/Shiny/shiny_tutorial/Hello Shiny")
runApp("C:/Users/Tyler/Shiny/shiny_tutorial/Hello Shiny")
library(shiny)
runApp("C:/Users/Tyler/Shiny/shiny_tutorial/Hello Shiny")
runApp("C:/Users/Tyler/Shiny/shiny_tutorial/Hello Shiny")
runApp("C:/Users/Tyler/Shiny/shiny_tutorial/Hello Shiny")
runApp("C:/Users/Tyler/Shiny/shiny_tutorial/Hello Shiny")
runApp("C:/Users/Tyler/Shiny/shiny_tutorial/census-app")
runApp("C:/Users/Tyler/Shiny/shiny_tutorial/census-app", display.mode = "showcase")
x<-seq(1,10)
y<-x*2+rnorm(10)
plot(x,y)
mod<-lm(y~x)
x_new<-c(1.5,2.5,3.5)
(1+t(x_new)%*%solve(t(x)%*%x)%*%x_new)
t(x)%*%x
solve(t(x)%*%x)
t(x_new)%*%solve(t(x)%*%x)
(1+x_new%*%solve(t(x)%*%x)%*%t(x_new))
x_new
x<-t(x)
x
x<-seq(1,10)
x<-matrix(seq(1,10),nrow=10)
x_new<-matrix(c(1.5,2.5,3.5),nrow=3)
(1+x_new%*%solve(t(x)%*%x)%*%t(x_new))
(1+t(x_new)%*%solve(t(x)%*%x)%*%x_new)
(1+x_new%*%solve(t(x)%*%x)%*%t(x_new))
library(shiny)
runApp("C:/Users/Tyler/Shiny/shiny_tutorial/census-app", display.mode = "showcase")
